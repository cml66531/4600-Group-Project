/**
 *  Name of Game: Dungeon Dash
 *  Team Name: I'm Sorry MIS Jackson
 *  Team Members: Chris Levy, Sarah Duvall, Thomas DeLay
 *  Game Description: You start out in the grand hall of a castle and must travel around its unique rooms
 *  looking for a key that gives you access to the hidden chest which contains all of the kings gold.
 *  Newly Added Features: 10 rooms, a key, and a chest full of gold.
 *  Bugs: None
 *  
 *  This class is the main class of the Dungeon Dash application. 
 *  
 */

public class Game 
{
    private Parser parser;
    private Room currentRoom;
    private Key key;  
    private Chest chest;
    private SecretRoom secretRoomKey;
    boolean secretKey = false;
    private SecretRoom secretRoomChest;
    private SecretRoom secretRoomKnight;
    boolean gameFinished = false;
    /**
     * Create the game and initialise its internal map.
     */
    public Game() 
    {
        createRooms();
        parser = new Parser();
    }

    /**
     * Thomas DeLay: edited the romos to create each rooom of the castle and assigned each room each of their exits. 
     */
    private void createRooms()
    {
        Room greatHall, diningRoom, kitchen, chapel, hallway, closet, throneRoom;
        SecretRoom bedroom, kingsRoom, guardRoom;

        // create the rooms
        greatHall = new Room("in the great hall of the castle");
        diningRoom = new Room("in the dinning room");
        guardRoom = new SecretRoom("in the guard's room");
        hallway =new Room("walking down the southern hallway");
        kitchen = new Room("in the kitchen");
        chapel = new Room("in the chapel");
        closet = new Room("in his majesty's closet.");
        throneRoom = new Room("standing among the iron throne in his majesty's throne room.");
        bedroom = new SecretRoom("in Lady Sansa's bedroom. You've found the key.") ;
        kingsRoom = new SecretRoom("in King Joffrey's bedroom. You see a chest in the corner.");
        
        secretRoomKnight = guardRoom;
        secretRoomKey = bedroom;
        secretRoomChest = kingsRoom;

        // initialise room exits
        greatHall.setExit("east", diningRoom);
        greatHall.setExit("west", guardRoom);
        greatHall.setExit("north", hallway);

        guardRoom.setExit("east", greatHall);

        diningRoom.setExit("west", greatHall);
        diningRoom.setExit("north", kitchen);

        kitchen.setExit("east", chapel);
        kitchen.setExit("west", hallway);
        kitchen.setExit("south", diningRoom);

        chapel.setExit("west", kitchen);
        chapel.setExit("north", bedroom);

        bedroom.setExit("north", closet);
        bedroom.setExit("south", chapel);

        closet.setExit("south", bedroom);
        hallway.setExit("east", kitchen);
        hallway.setExit("north", throneRoom);
        hallway.setExit("south", greatHall);

        throneRoom.setExit("west", kingsRoom);
        throneRoom.setExit("south", hallway);

        kingsRoom.setExit("east", throneRoom);

        currentRoom = greatHall;  // start game in the great hall
    }

    /**
     *  Main play routine.  Loops until end of play.
     */
    public void play() 
    {            
        printWelcome();

        // Enter the main command loop.  Here we repeatedly read commands and
        // execute them until the game is over.
        
        while (!gameFinished) {
            Command command = parser.getCommand();
            gameFinished = processCommand(command);
        }
        System.out.println("Thank you for playing Dungeon Dash.  Have a good day.");
    }

    /**
     * Print out the opening message for the player.
     */
    private void printWelcome()
    {
        System.out.println();
        System.out.println("Welcome to Dungeon Dash!");
        System.out.println("Dungeon Dash is a new and very addictive adventure game!");
        System.out.println();
        System.out.println("Test your medieval knowledge and see if you can find the key to unlock");
        System.out.println("King Joffrey's chest of unknown treasure...");
        System.out.println("Type 'help' if you need help.");
        System.out.println();
        System.out.println(currentRoom.getLongDescription());
    }

    /**
     * Given a command, process (that is: execute) the command.
     * @param command The command to be processed.
     * @return true If the command ends the game, false otherwise.
     */
    private boolean processCommand(Command command) 
    {
        boolean wantToQuit = false;

        if(command.isUnknown()) {
            System.out.println("I don't know what you mean...");
            return false;
        }

        String commandWord = command.getCommandWord();
        if (commandWord.equals("help")) {
            printHelp();
        }
        else if (commandWord.equals("go")) {
            goRoom(command);
        }
        else if (commandWord.equals("quit")) {
            wantToQuit = quit(command);
        }
        // else command not recognised.
        return wantToQuit;
    }

    // implementations of user commands:

    /**
     * Print out some help information.
     * Here we print some stupid, cryptic message and a list of the 
     * command words.
     */
    private void printHelp() 
    {
        System.out.println("You have entered the castle and hear that there is hidden ");
        System.out.println("treasure lying around King Joffrey's castle.");
        System.out.println();
        System.out.println("Your command words are:");
        parser.showCommands();
    }

    /** 
     * Try to in to one direction. If there is an exit, enter the new
     * room, otherwise print an error message.
     */
    private void goRoom(Command command) 
    {
        if(!command.hasSecondWord()) {
            // if there is no second word, we don't know where to go...
            System.out.println("Go where?");
            return;
        }

        String direction = command.getSecondWord();

        // Try to leave current room.
        Room nextRoom = currentRoom.getExit(direction);

        if (nextRoom == null) {
            System.out.println("There is no door in that direction...");
        }
        else 
        {
            currentRoom = nextRoom;
            System.out.println(currentRoom.getLongDescription());
        }
        
        if(nextRoom == secretRoomKnight)
        {
            System.out.println("You are attacked by the castle's knight and die immediately.");
            gameFinished = true;
        }
        
        if(nextRoom == secretRoomKey)
        {
            System.out.println("You have found the key! Now find the Chest!");
            secretKey = true;
        }

        if(nextRoom == secretRoomChest && secretKey == false)
        {
            System.out.println("You have found King Joffrey's chest! If only you had the key. Keep looking.");
        }

        if(nextRoom == secretRoomChest && secretKey == true)
        {
            System.out.println("You have found the chest! The chest is unlocked and full of King Joffrey's hidden treasure! Congrats, you're rich!");
            gameFinished = true;
        }

    }

    /** 
     * "Quit" was entered. Check the rest of the command to see
     * whether we really quit the game.
     * @return true, if this command quits the game, false otherwise.
     */
    private boolean quit(Command command) 
    {
        if(command.hasSecondWord()) {
            System.out.println("Quit what?");
            return false;
        }
        else {
            return true;  // signal that we want to quit
        }
    }
}
